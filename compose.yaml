services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app  # Mount frontend source code for live reloads
      - /app/.next  # Persist Next.js build files for hot reloading
    depends_on:
      - backend
    ports:
      - "3000:3000"  # Expose frontend app on port 3000
    environment:
      - NODE_ENV=development
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app  # Mount backend source code for live reloads
    depends_on:
      - db
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgres://kaleb:123@db:5432/bookmarkdb
    ports:
      - "5000:5000"  # Expose backend app on port 5000
    networks:
      - app-network

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: kaleb
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: bookmarkdb
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: kaleb@admin.com
      PGADMIN_DEFAULT_PASSWORD: 123
    ports:
      - "6060:80"
    depends_on:
      - db
    networks:
      - app-network

  nginx:
    image: nginx:latest  # Use the official Nginx image
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount your custom nginx.conf
      - ./frontend/.next:/usr/share/nginx/html  # Mount the frontend build folder to Nginx
    ports:
      - "80:80"  # Expose Nginx on port 80
    depends_on:
      - frontend  # Ensure frontend is up before Nginx
      - backend  # Ensure backend is up before Nginx
    networks:
      - app-network

volumes:
  pg_data:

networks:
  app-network:
    driver: bridge
